"""Add user table and refresh token

Revision ID: 04302b634290
Revises: 549fe756fd79
Create Date: 2024-12-16 19:02:57.994945

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "04302b634290"
down_revision: Union[str, None] = "549fe756fd79"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("hashed_password", sa.String(length=255), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("role", sa.Enum("ADMIN", "USER", name="userrole"), nullable=False),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("failed_login_attempts", sa.Integer(), nullable=False),
        sa.Column("locked_until", sa.DateTime(), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_table(
        "refresh_tokens",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("token", sa.String(length=255), nullable=False),
        sa.Column("expires_at", sa.DateTime(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("is_revoked", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_refresh_tokens_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_refresh_tokens")),
        sa.UniqueConstraint("token", name=op.f("uq_refresh_tokens_token")),
    )
    op.drop_table("customers")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "customers",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column(
            "first_name", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "last_name", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column("gender", sa.VARCHAR(length=6), autoincrement=False, nullable=False),
        sa.Column("date_of_birth", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("email", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column(
            "phone_number", sa.VARCHAR(length=20), autoincrement=False, nullable=True
        ),
        sa.Column(
            "address_line1", sa.VARCHAR(length=200), autoincrement=False, nullable=False
        ),
        sa.Column(
            "address_line2", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
        sa.Column("city", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column("state", sa.VARCHAR(length=100), autoincrement=False, nullable=False),
        sa.Column(
            "nationality", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column(
            "postal_code", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column(
            "id_card_number", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "document_number",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "id_card_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column("id_card_issue_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column(
            "id_card_expiry_date", sa.DATE(), autoincrement=False, nullable=False
        ),
        sa.Column(
            "where_born", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "birth_certificate_margin",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "father_name", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column(
            "father_occupation",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "mother_name", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column(
            "mother_occupation",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "birth_certificate_issue_date",
            sa.DATE(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id", name="customers_pkey"),
        sa.UniqueConstraint(
            "birth_certificate_margin", name="customers_birth_certificate_margin_key"
        ),
        sa.UniqueConstraint("document_number", name="customers_document_number_key"),
        sa.UniqueConstraint("email", name="customers_email_key"),
        sa.UniqueConstraint("id_card_number", name="customers_id_card_number_key"),
    )
    op.drop_table("refresh_tokens")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
